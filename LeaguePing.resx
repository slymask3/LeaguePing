<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgIDABcEAQAlBQAAOQgAAEgJAAAREAAABQwVAFULAAAJEQ0AZgwAADkRBwABDyEAJhINAJIL
        AABHFAMAJxUSAFgVAgAKFhwAExgYAGcXAgB2GAMAChoiADYaFACWFwAAhhoBABEdIwBMGxYA0xUAAAUg
        JQC4GQAAqBsAAMEaAAAFHzQAPyEaAGckAwAUIigASiQUAHglBQAEIjkA5R0AAKYlAQCHKAIAlycDACAo
        KgB9JhQAiScRALcnAwDGJwMA2SYBAHYyAgAWLDkAAC1AAJMuFQBsMhUAiDUDAOQtAQCYNQIABC1RACg4
        JAAWMzwARTQrAKc3AwC3NgIA2jUBAPIzAgDlNQIAGThDAJg4GQDJOgQAjkEBAJhDAgANPEkACDhZAIY/
        FwCnRAMAET1RAENANgCEQh0Am0EZALVIAgAZQkwAmEMgAMdHBgAgQ04Ap0YXABM9aADXRwQA5UgEACFG
        UgADPnkAtksWAA5JVgCrUgMADUVqAAA/gwASSlsAulUDABdLZQAISHoAxFkEABZIeQDTWAcAJFFbABVS
        XQC3VxgA5VkFAAZKhAAWVWMAGE2BAMVdEQCwWiQAIE96AL5hEQAoWGUADVZ2AN5fEQDJZQUAClOJABdX
        eQDUaAUA6GYHABdWhwC1YykAyGgXAOJmFQAKWJUAJFmJAM50AgAUXJMAGWN6ACllbgAFWqEANV2HANd1
        AwAhXZIA4XgJAMdyKAAaZJgAHmmGAOt2FgAkaYkADGWkACVmmgDheSAANWibABprpwBAbJoANnSDACZt
        oQDihw4ALXKTAA5rtwA9bKYATnSYACV0pwAbdqoA1okvADZ7lwA6d6cAGne3AECCigBEeagALICZACR6
        tABWe6IAUX2dABV5wwBAg5QAMHyyAGSAlACAg4EA4pIwAGR+oQA7hJ0AQn+2ACeDtgA5iKUAN4i1ABuG
        ygAmjqwAEYbQAI2OjQBRirQAJorEAHKMpwAbkMEAM5C8ACWL0gArkb8AKZTHADaXwwAdkeEAaZi4AEeY
        ywCMmrEAdJm+ACea1wAymtQAHZzWAHKcxAAvm+AAM6LOACqh1wBIo8kANafYAEin2AAspuUAVqfXAFeq
        zQBJqeIANqvkADax0gBbsM0AV6zkAEa1zwBrsNYASrLbADiy6gArtuQAVbbcAEq25gAtuPIAZ7nmAFS7
        5wCDu9kANrv0AEK78wBLw+AAj8DZAFbF5gBVytoAVMTyAGbI6QBpx/QASsn5AHbJ6wA+zf8AWNHsAHvO
        9ABj1OkAXdb1AHTX8QB42eoAY9n4AFvk/wBr5fwAdOb7AIfm/AB78f8Ag/b/AKz//wAAAAAAAAAAAAAA
        AAAAAAAACVRyZ1lZWVlUWUNncnJycnJycnKDcnJnWVRDQ0NDQ0NDQ0NDQ1FDUUNDQ0NZWVQHJPH09Orq
        4N/q6u/q6Org4OjS4ODZ4ODd3NbZ3eDd6N3d3ejo6Ojo6ODg4ODx9PEkGua4ha2qrbnDubmmpZpwbW2T
        cFZWbWVlbX9tZW1tf39th5WPgYePen+Hj5WPveYaGuakFytFL1VFRT8vLzArCgQUFS0VFBUVLS0tFBUV
        LSYUFS0mERQUERUtLS4bpOYaGtygAhUpDispHw4eHCgeDg4YHxgfLxgpPy8/Pik5OUtHS0dGMjcqPhUr
        MBULpNwaGuCVAQEDBAICAwEKCAUBAQUKHiAeGQoZUz9QP1BkZHV4eHhkZGpqQEVCKAQBm+AkGuCVAQAD
        CAEBAgEBAAEAAQABAQEBAAEBAgECBgECBgIGBgYCBg9KGXl9QggBj+AaGuaKAQEFFQABFmKCgpeLd3eL
        jYKLi4Jzd5eenp6urrGurrGxsWwBBX2MQggBkuYkJOCkAQAVKQQBAUySvtLNxc3T1L7Oy8bNzdrLxd3a
        2tri4uLi7dQHBUV0WAgBpOksGuabAQEVOEA/CAFJipK7zsq+vb2/vbq+uMXJvtTLxcvLz8fH6/AdAz5Y
        QgoBqeosJOicAQAfQD8qKgMBXn6BpL6+yr6/2eDj4+v469Pa4+jd3tv09/RyAS5XQBUBr/IsGuCSAQEv
        KzdXQCoAIYF2gbKwnLCbm6m4oKC8vJiSxsnAteL7+PeoASZFWCsBt+wsGuCkAQApPzJTVz8AFn52Y8Lm
        m3Z2fnZrX46khI6Sp5iYjqfa+uvkHQhTWD4Bwu8kGtybBwAVWEdmNyoCDGt2Wrv38JtrgZJ+foFtfoqc
        oLWzp6C8yfT1bANbaj4Jt+wkFtyKAQEZRUd5PzkVDHZjdrD5+fCKX1o6JwcBBwwdPGB6nMq4p9P1tAJV
        fT4Bsd8aGuCKAQEEJjlqVz8VFnZ2epv39PdiBwEBAAAAAAAAAAABHWiws7zr5gk3kEsBn+AaGuCSAQER
        BEVYVykZDGtrWrL29vZRAAAAAAAAAgECAgIBAgEWc77P9kgjdD4Bn+AaFtyKAQEYQClFQkIZDGN2dtX3
        9vpyAQABAgIEBQoIFCsrFRQFATSg7aMPRRgBm9wWGtmBAQAYQRkvODEVB2OBdr/39vpnAQEDGStbP2Zm
        Zng+GREqFAMhuOQQPxkBitkaFtmBAQAVMTAwODERDIGKfr/39/eDAQgtKVOQkKyQiHhTUEcjFBQDHaM8
        KhkBitAWFtCBAQAELxggOBgRDIF+dsz69/mDAhkrP1NmiIiIhoB1YUcmN0sRAglDNi4Bes4WEsKPBwAV
        DhggMQIIDHZ2a9H37vdgDzVSaW50iIiWiIB1dV1GRiYRAwQ7TSYBkr8SFsybAQEYGQVBLxg+En52X873
        9vRsBERviZB4hpaWlpaGgHVdRyYPMkpOTSMBj8wWGtGXAQEpQS8wFVg3DH5jfuz68vFsDy4AAAAAAAAA
        AAAAAAAAAAAAAABVTiUBiswaGtGXAQAVQUEvAj8ZFmtjhMz45PRoDy4AtqurqwAAtqurqwAAtqurqwBV
        NwMBf8waFtGfCQArODA/DzkZFnZ2hOzz8fFcD0QAtqurqwAAtqurqwAAtqurqwBLIwIBj8waFtGeAQAp
        KilFEUsVHYF2sO/w8O5MDy4AtqurqwAAtqurqwAAtqurqwA5IwIBh8waGtiUAQArFRVFEUs1EnZ2nM7n
        7u5oDy0AtqurqwAAtqurqwAAtqurqwA5FAIBf9AaE9WoCQAYKRQ+P0tHGnZjhN3m5vRcBVIAtqurqwAA
        tqurqwAAtqurqwAqEQIBf8wHCbfBBgEZKSZLU0sqJGNjiurw7vZsJUQAtqurqwAAtqurqwAAtqurqwAq
        FAIHorIJCbfBCQARIw9LS0smB2Nrjt3n8PRsETUAtra2tgAAtqurqwAAtqurqwAyIwMHorIJALfBAQAC
        AhFkR0syHYFaft3w8PRsEVUAAAAAAAAAtqurqwAAtqurqwAqEQMBkbEAAaa3AQAEAQ9dYUYyLHZ2a9n3
        1/RsD2+JiZ2diXUAtqurqwAAtqurqwA3EQMBj6IACcHBCQACAwgycUcyJHZrWtXz3PdsEVtxfImJfHUA
        tqurqwAAtqurqwA3FAMBn8IGE9/ICQALDSMjYUcjIYFjftXw7vRsCFuJbm58bmQAtra2tgAAtqurqwAy
        FAMBr9YTE+HICQADMjdHRk9PCWt+ktXn5vRsCFVbfG6JbnEAAAAAAAAAtqurqwA3FAMHr9gTE+XECQAD
        N2R5NxUtFmtres3x9PRiCERpfHuJfHFhXUtLS0sAtqurqwA3FAMHr+ETE+HICQACN0dXZkQIEmuBgeD0
        5u5gBSs+aWluYV1dXUZHRjkAtqurqwAqFAMBt+ESLNjECQEFESZXKxkCXLicp8Lq1816Ay5Ve3tpaV1L
        S0tHRjkAtra2tgAmEQMBt9gkGtXIDQEKGCkVFQNy8cycnF+v3N2gDAQrT1V7W0tQXUtGNzcAAAAAAAAV
        BQIJt9ASGtC3CQEVBQMFDaH45ruwm6SEhKm8oEkNCitVWz5LS0s3MjIyKioZGRkRBAIHmdAaGtaiAQED
        CggCSJRiOklecH92h3djd3dIEyNEPj45OTcjIyMVFRkZGRUIBAIBkdYWEtivAQEBAwIBAQEBAQEBAAEB
        AQAAAQEJEBARFBEREQ8ECwsPBQUFCAUEAgEBn98SFtaZDQUIBQgKBQQEAwQEBQMEBQQFCAUICAoKCAgF
        ERERCBEPBREFFAgICAULmdYWDNaZEBAQEBciFw0QAhAQCQINFxcQEBcXIiIiFxciIiIXIiUiFxcXFxc9
        IiIQmdASEsK3f5FthZmlkZOPkZFtbW2TbWVWdmVlenptY216enp6gZWPgYqVenqKipuPt9ASEsLS1t/W
        zs7W1uzW1tbCws7CwtLC0s7Ozs7C2dLS6ODg3ejo6Ojo6ODg5uDg4NwaCTMzPDw8PDxDQzMzPDMkJCQz
        MzxRQ0NDQ0M8Q0NDQ0NDQ0NDQ0NDQ0NDQ0NDVDwHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>